<?php

/*
 * Copyright (c) Romain Cottard
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */

declare(strict_types=1);

namespace Application\Domain\User\Infrastructure\Mapper\Abstracts;

use Eureka\Component\Database\ConnectionFactory;
use Eureka\Component\Orm\RepositoryInterface;
use Eureka\Component\Orm\Traits;
use Eureka\Component\Validation\Entity\ValidatorEntityFactory;
use Eureka\Component\Validation\ValidatorFactoryInterface;
use Application\Domain\User\Entity\User;
use Application\Domain\User\Repository\UserRepositoryInterface;
use Psr\Cache\CacheItemPoolInterface;

/**
 * Abstract User mapper class.
 *
 * /!\ AUTO GENERATED FILE. DO NOT EDIT THIS FILE.
 * You can add your specific code in child class: UserMapper
 *
 * @author Eureka Orm Generator
 */
abstract class AbstractUserMapper
{
    /** @use Traits\CacheAwareTrait<UserRepositoryInterface, User> */
    use Traits\CacheAwareTrait;
    use Traits\ConnectionAwareTrait;
    /** @use Traits\EntityAwareTrait<User> */
    use Traits\EntityAwareTrait;
    /** @use Traits\MapperTrait<UserRepositoryInterface, User> */
    use Traits\MapperTrait;
    use Traits\TableTrait;
    use Traits\ValidatorAwareTrait;

    /**
     * @param array<class-string, RepositoryInterface> $mappers
     */
    public function __construct(
        string $connectionName,
        ConnectionFactory $connectionFactory,
        ValidatorFactoryInterface|null $validatorFactory = null,
        ValidatorEntityFactory|null $validatorEntityFactory = null,
        array $mappers = [],
        CacheItemPoolInterface|null $cache = null,
        bool $enableCacheOnRead = false
    ) {
        $this->setConnectionName($connectionName);
        $this->setConnectionFactory($connectionFactory);
        $this->setCache($cache);
        $this->setValidatorFactories($validatorFactory, $validatorEntityFactory);

        $this->addMappers($mappers);

        if ($enableCacheOnRead) {
            $this->enableCacheOnRead();
        }

        $this->initialize();
    }

    /**
     * Initialize mapper with proper values for mapped table.
     */
    protected function initialize(): void
    {
        $this->setEntityClass(User::class);
        $this->setTable('user');

        $this->initializeFields();
        $this->initializeMapping();
        $this->initializeValidatorConfig();
        $this->initializeJoinConfigs();
    }

    protected function initializeFields(): void
    {
        $this->setFields([
            'user_id',
            'user_is_enabled',
            'user_privileges',
            'user_email',
            'user_password',
            'user_first_name',
            'user_last_name',
            'user_pseudo',
            'user_token_hash_list',
            'user_date_first_access',
            'user_date_last_access',
            'user_date_create',
            'user_date_update'
        ]);

        $this->setPrimaryKeys([
            'user_id'
        ]);
    }

    protected function initializeMapping(): void
    {
        $this->setNamesMap([
            'user_id' => [
                'get'      => 'getId',
                'set'      => 'setId',
                'property' => 'id',
            ],
            'user_is_enabled' => [
                'get'      => 'isEnabled',
                'set'      => 'setIsEnabled',
                'property' => 'isEnabled',
            ],
            'user_privileges' => [
                'get'      => 'getPrivileges',
                'set'      => 'setPrivileges',
                'property' => 'privileges',
            ],
            'user_email' => [
                'get'      => 'getEmail',
                'set'      => 'setEmail',
                'property' => 'email',
            ],
            'user_password' => [
                'get'      => 'getPassword',
                'set'      => 'setPassword',
                'property' => 'password',
            ],
            'user_first_name' => [
                'get'      => 'getFirstName',
                'set'      => 'setFirstName',
                'property' => 'firstName',
            ],
            'user_last_name' => [
                'get'      => 'getLastName',
                'set'      => 'setLastName',
                'property' => 'lastName',
            ],
            'user_pseudo' => [
                'get'      => 'getPseudo',
                'set'      => 'setPseudo',
                'property' => 'pseudo',
            ],
            'user_token_hash_list' => [
                'get'      => 'getTokenHashList',
                'set'      => 'setTokenHashList',
                'property' => 'tokenHashList',
            ],
            'user_date_first_access' => [
                'get'      => 'getDateFirstAccess',
                'set'      => 'setDateFirstAccess',
                'property' => 'dateFirstAccess',
            ],
            'user_date_last_access' => [
                'get'      => 'getDateLastAccess',
                'set'      => 'setDateLastAccess',
                'property' => 'dateLastAccess',
            ],
            'user_date_create' => [
                'get'      => 'getDateCreate',
                'set'      => 'setDateCreate',
                'property' => 'dateCreate',
            ],
            'user_date_update' => [
                'get'      => 'getDateUpdate',
                'set'      => 'setDateUpdate',
                'property' => 'dateUpdate',
            ],
        ]);
    }

    protected function initializeValidatorConfig(): void
    {
        $this->setValidatorConfig([
            'user_id' => [
                'type'      => 'integer',
                'options'   => ['min_range' => -9.223372036854776E+18, 'max_range' => 9223372036854775807],
            ],
            'user_is_enabled' => [
                'type'      => 'boolean',
                'options'   => [],
            ],
            'user_privileges' => [
                'type'      => 'integer',
                'options'   => ['min_range' => -9.223372036854776E+18, 'max_range' => 9223372036854775807],
            ],
            'user_email' => [
                'type'      => 'string',
                'options'   => ['min_length' => 0, 'max_length' => 150],
            ],
            'user_password' => [
                'type'      => 'string',
                'options'   => ['min_length' => 0, 'max_length' => 100],
            ],
            'user_first_name' => [
                'type'      => 'string',
                'options'   => ['min_length' => 0, 'max_length' => 150],
            ],
            'user_last_name' => [
                'type'      => 'string',
                'options'   => ['min_length' => 0, 'max_length' => 150],
            ],
            'user_pseudo' => [
                'type'      => 'string',
                'options'   => ['min_length' => 0, 'max_length' => 150],
            ],
            'user_token_hash_list' => [
                'type'      => 'string',
                'options'   => ['min_length' => 0, 'max_length' => 1000],
            ],
            'user_date_first_access' => [
                'type'      => 'datetime',
                'options'   => [],
            ],
            'user_date_last_access' => [
                'type'      => 'datetime',
                'options'   => [],
            ],
            'user_date_create' => [
                'type'      => 'datetime',
                'options'   => [],
            ],
            'user_date_update' => [
                'type'      => 'datetime',
                'options'   => [],
            ],
        ]);
    }

    protected function initializeJoinConfigs(): void
    {
        $this->setJoinConfigs([
        ]);
    }
}
